#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Calcparser
  class Parser < Racc::Parser

module_eval(<<'...end ejemploGrammar.rb/module_eval...', 'ejemploGrammar.rb', 17)
    def parser(tokens)
        @tokens = tokens
        do_parse
    end

    def next_token
        @tokens.shift
    end
...end ejemploGrammar.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     6,     7,     3,    12,     4,     4,     4,     3,     3,
     3,     6,     7,     6,     7,     6,     7,     5,     9 ]

racc_action_check = [
     0,     8,     8,     0,     8,     7,     3,     6,     7,     3,
     6,    11,    11,     2,     2,    10,    10,     1,     5 ]

racc_action_pointer = [
    -2,    17,    10,     4,   nil,    18,     5,     3,    -2,   nil,
    12,     8,   nil ]

racc_action_default = [
    -6,    -6,    -1,    -6,    -5,    -6,    -6,    -6,    -6,    13,
    -2,    -3,    -4 ]

racc_goto_table = [
     2,     1,   nil,     8,   nil,   nil,    10,    11 ]

racc_goto_check = [
     2,     1,   nil,     2,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_1,
  3, 9, :_reduce_2,
  3, 9, :_reduce_3,
  3, 9, :_reduce_4,
  1, 9, :_reduce_5 ]

racc_reduce_n = 6

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  "NUMBER" => 2,
  "+" => 3,
  "*" => 4,
  "(" => 5,
  ")" => 6 }

racc_nt_base = 7

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "\"+\"",
  "\"*\"",
  "\"(\"",
  "\")\"",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ejemploGrammar.rb', 7)
  def _reduce_1(val, _values, result)
    result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'ejemploGrammar.rb', 9)
  def _reduce_2(val, _values, result)
     puts "estoy en + #{val}"; hey = val
    result
  end
.,.,

module_eval(<<'.,.,', 'ejemploGrammar.rb', 10)
  def _reduce_3(val, _values, result)
     puts "estoy en * #{val}"; yippie = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'ejemploGrammar.rb', 11)
  def _reduce_4(val, _values, result)
     puts "estoy en () #{val}"; nou = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'ejemploGrammar.rb', 12)
  def _reduce_5(val, _values, result)
     puts "estoy en NUMBER #{val}"; quesesto = val
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Calcparser
