Javier Lopez     11-10552
Patricia Reinoso 11-10851


Uso
===

Para correr el proyecto, es necesario "compilar" el archivo de gramatica 
parse/grammar.rb, esto puede realizarse en la carpeta principal
con el comando rake compile_grammar, esta accion tambien puede realizarse 
mediante el comando 'racc ./parser/grammar.rb -oparser/racc.rb'

Luego de compilar, la ejecución se hará mediante ./lanscii [archivo a analizar] 
esto reportará posibles errores de lexing encontrados, si no se encuentra 
ninguno, los tokens hallados serán parseados en un árbol sintactico, de hallar
errores de gramática la ejecución se detiene y se imprime el primer error, en 
caso contrario se procede a la ejecución de los nuevos módulos de esta tercera
entrega los cuales imprimen las tablas de símbolos y los posibles errores
de declaración, de tipos, y de modificación de variables especiales.

Con el comando rake run, se compilará la gramática y se ejecutará el parser
reconociendo el archivo parser/example1.lc

El comando rake suite ejecutará todos los ejemplos de la carpeta 
parser/examples y colocara su salida en /salida.txt




Decisiones de implementación
============================

Para esta entrega se incluyeron los siguientes módulos:

dataStructures
    |_ Errors.rb
    |_ symbolTable.rb

Se realizaron las modificaciones recomendadas en parser/grammar.rb, y se agregó 
código nuevo en parser/TokenClasses.rb

Se intentó, en la medida de lo posible separar el código de forma modular.

En Errors.rb se encuentran las diferentes clases que representan todos los 
tipos de errores posibles, cada una posee un metodo to_s para su representación
como string.


En symbolTable se encuentra la clase SymbolTable, la cual posee un arreglo para
errores, una apuntadora a una posible tabla padre, una lista de posibles 
symbolTable hijos y una tabla de hash para identificadores con sus respectivos 
tipos y e indicador de si es modificable.
En este archivo también se encuentran las clases Constant y SymbolUser que son
los pasos base y recursivos respectivamente para el pase de la tabla de símbolos
a través del árbol sintáctico.



Estado actual del proyecto
==========================

Este proyecto cumple con los requerimientos de las dos entregas anteriores
(parser y lexer), actualmente realizamos una impresión del arbol generado
por las diferentes tablas de símbolos, también se hace una verificación
del contexto en donde analizamos los tipos de las variables que se asignan,
si estas se encuentran declaradas en la tabla de símbolos actual, en algún
nivel superior, o simplemente no se encuentran. Por último, en la instrucción
de iteración determinada con variable, se realiza la verificación de que en
ninguna instrucción interna, el iterados no sea modificado.

Comentarios
===========

En la carpeta parser/examples se encuentran alguno ejemplos de programas.

* example[1..8].lc  ejemplos varios, de entregas anteriores y modificaciones
                    nuevas

* example9.lc       primer ejemplo del enunciado de la tercer entrega, fue 
                    modificado para que sea correcto

* example10.lc      segundo ejemplo de la entrega, ejemplo de errores esperados