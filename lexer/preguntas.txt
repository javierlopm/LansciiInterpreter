1 Representación de comentarios
===============================
Para el reconocimientos de  los comentarios en  nuestro analizador lexicográfico
hicimos uso de varias expresiones regulares, las cuales atrapan posibles errores
antes de intentar ignorar un comentario por completo.

Con  la  expresion   /\A\{\-(.*\-\}){2,}/m  encontramos  primero  los  posibles 
comentarios  mal  formados  debido a cierres multiples con -}.  Si el string de 
comentario no es reconocido como erróneo será atrapado por /\A\{\-(.*\-\}){1}/m

Para construir  ambas expresiones pedimos con \A que la  coincidencia se  busque
al inicio del string, luego con \{\- marcamos el inicio de un comentario (bien o 
mal formado),  con .*  buscamos cadenas  de  caracteres cualquiera  (incluso una 
vacía), pero que tengan -} como sufijo; mediante {2,} aseguramos que esta última 
construcción se encuentre al menos  dos  veces,  este  será  un  comentario  mal 
formado, el cual filtramos, y  está  asociado al estado  final q1 del  autómata.  
Si  la búsqueda  anterior  falla buscamos  una expresión similar, pero usando el  
sufijo es (.*\-\}){1}, el cual encuentrará el comentario bien  formado.  
Por  último el modificador \m fue  usado para  que los comentarios  pudieran ser 
multilínea.

Las  decisiones  tomadas  funcionan  ya que hacemos un filtrado del conflicto de
múltiples  cierres,  ya que .* hace  match con  cualquier expresión  incluso -}.
Los demás problemas como la  apertura sin cierre (o visceversa) simplemente no 
son  reconocidas por  la  primera ni la segunda expresión,  estos  dos casos son  
reconocidos  por  separado sin afectar la solución propuesta. 
El match  multilínea  solo afecta, en este caso a .*, así que no existen cierres 
ni aperturas de comentarios mal formados.

El automata  no  determinista  de esta pregunta emula el resultado final de usar
las dos expresiones regulares. (comment.png)

2 Expresiones write e identificadores
=====================================

E0 es la expresión regular que corresponde a la palabra reservada write.
El token write es reconocido simplemente por la concatenación de los caracteres
lo representan, así /write/ reconocerá la expresión y /\Awrite/ lo reconocerá
únicamente al inicio de un string.

E1 es la expresión regular que corresponde a los identificadores de variables
Un identificador es reconocido con la siguiente expresión regular /[a-zA-Z]\w*/,
igualmente con \A al inicio, solo se reconoce como prefijo.

3 Autómata de 2
===============
El lenguaje L0 denotado por E0 que corresponde a la palabra reservada write 
se encuentra representado por el autómata M0 en el archivo write.png

El lenguaje L1 denotado por E1 que corresponde a los identificadores de 
variables se encuentra representado por el autómata M1 en el archivo identifier.png

4 Autómata de la unión de los lenguajes
=======================================
El autómata M2 que reconoce la unión de L(M0) y L(M1) se encuentra en union.png

5 Pertenencia de un token a un lenguaje
=======================================
Según el  autómata M2  en  union.png, el  estado  final  q0  reconoce a los 
identificadores de varialbes del lenguaje y el estado final q1 reconoce 
la palabra reservada write.

6 Problemas en la selección de 5
================================

Se generan conflictos,  debido a que un  token  puede  hacer match con 2 estados 
finales. Al llegar al estado final q1, se puede  elegir entre reconocer el token 
en ese punto o continuar hacia el estado final q0.  Esto  puede  generar  que se 
reconozca un token incompleto.


7 Palabras generadoras de fallas y nodos involucrados
===============================================

Dentro  del  lanscii  está  permitido  crear  identificadores  de  variables que 
comiencen con "write", por  ejemplo el identificador "writesomething" es válido. 
Por la  manera  en la que está  planteado  el autómata,  puede  suceder  que  se 
reconozca "write" en el nodo final q1, dejando "something" como un identificador 
a parte. Esto puede ocurrir con cualquier palabra reservada del lenguaje como 
"read", "true", "false".


8 Solución y justificación
==========================

La solución empleada para el conflicto de reconocimiento fue cambiar la expresión
regular que reconoce la palabra reservada write. Se agregó "\b" al final, quedando
de la siguiente manera /write\b/ . Esto permite reconocer la palabra reservada solamente
si es una palabra entera, si está seguido de algo, será reconocida como un identificador.
Se utilizó lo mismo para las demás palabras reservadas del sistema.


9 Relación entre implementación y preg 2/8
===========================================

Al implementar el analizador lexicográfico de Lanscii, se logra separar en tokens cada una de
las palabras válidas para el lenguaje. Al hacer esto, se genera implícitamente un autómata. 
Lo que se puede relacionar con las preguntas 2-8 ya que en éstas se definió explícitamente
parte del autómata que define el lenguaje. Al responder estas preguntas, se pudo visualizar
mejor los posibles conflictos de reconocimiento que luego fueron solucionados en el lexer
creado.
