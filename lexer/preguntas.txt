1 Representación de comentarios
===============================
Para el reconocimientos de  los comentarios en  nuestro analizador lexicográfico
hicimos uso de varias expresiones regulares, las cuales atrapan posibles errores
antes de intentar ignorar un comentario por completo.

Con  la  expresion   /\A\{\-(.*\-\}){2,}/m  encontramos  primero  los  posibles 
comentarios  mal  formados  debido a cierres multiples con -}.  Si el string de 
comentario no es reconocido como erróneo será atrapado por /\A\{\-(.*\-\}){1}/m

Para construir  ambas expresiones pedimos con \A que la  coincidencia se  busque
al inicio del string, luego con \{\- marcamos el inicio de un comentario (bien o 
mal formado),  con .*  buscamos cadenas  de  caracteres cualquiera  (incluso una 
vacía), pero que tengan -} como sufijo; mediante {2,} aseguramos que esta última 
construcción se encuentre al menos  dos  veces,  este  será  un  comentario  mal 
formado, el cual filtramos, y  está  asociado al estado  final q1 del  autómata.  
Si  la búsqueda  anterior  falla buscamos  una expresión similar, pero usando el  
sufijo es (.*\-\}){1}, el cual encuentrará el comentario bien  formado.  
Por  último el modificador \m fue  usado para  que los comentarios  pudieran ser 
multilínea.

Las  decisiones  tomadas  funcionan  ya que hacemos un filtrado del conflicto de
múltiples  cierres,  ya que .* hace  match con  cualquier expresión  incluso -}.
Los demás problemas como la  apertura sin cierre (o visceversa) simplemente no 
son  reconocidas por  la  primera ni la segunda expresión,  estos  dos casos son  
reconocidos  por  separado sin afectar la solución propuesta. 
El match  multilínea  solo afecta, en este caso a .*, así que no existen cierres 
ni aperturas de comentarios mal formados.

El automata  no  determinista  de esta pregunta emula el resultado final de usar
las dos expresiones regulares. (comment.png)

2 Expresiones write e identificadores
=====================================

El token write es reconocido simplemente por la concatenación de los caracteres
lo representan, así /write / reconocerá la expresión y /\Awrite / lo reconocerá
únicamente al inicio de un string. Nótese que este token es seguido por un 
espacio.

Un identificador es reconocido con la siguiente expresión regular /[a-zA-Z]\w*/,
igualmente con \A al inicio, solo se reconoce como prefijo.

3 Autómata de 2
===============
Autómatas representados de forma gráfica en los archivos identifier.png y 
write.png

4 Autómata de la unión de los lenguajes
=======================================
Autómata representado en union.png

5 Pertenencia de un token a un lenguaje
=======================================

6 Problemas en la selección de 5
================================

7 Palabras generadoras de fallas e involucrados
===============================================

8 Solución y justificación
==========================

9 Relación entre implementación y preg 2/8
===========================================