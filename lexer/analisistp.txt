Javier   Lopez   11-10552
Patricia Reinoso 11-10851

1 Representación de comentarios
===============================
Para el reconocimiento de los comentarios hicimos uso de una única expresión 
regular para aquellos bien formados, y  otras dos  auxiliares para reconocer
comentarios que no terminan, o con múltiples cierres.

Los  comentarios  bien formados  son  reconocidos   mediante la  expresión 
/\{\-.*?\-\}/m la cual esta dividida en dos partes, la primera \{\-.*? que 
reconoce únicamente  la apertura de un comentario {- seguida de caracteres 
cualquiera incluyendo -}, la otra parte, \-\} nos asegura un único cierre. 
Por último decidimos usar el modificador m sobre la expresión regular para 
el 
reconocimiento permitiera que los comentarios fueran muntilínea.

Las otras dos expresiones usadas para los comentarios mal formados son 
/\{\-/ para reconocer solo {- y /\-\}/ de forma análoga con -}.

Nuestro proceso funciona porque reconoce primero  los comentarios bien formados 
sin importar  saltos de  línea con /m y permitiendo  solo nuevas aperturas, tal 
como se indica en la espeficacion del problema y solo en caso de no lograr este 
match intenta hacer buscar  coincidencias  con las expresiones alternativas las 
cuales son más  simples y  están contenida en  esta. Si se intentarealizar este 
reconocimiento en sentido inverso no funcionará debido al sentido de contención 
de estas expresiones, tal como fue explicado anteriormente.

El automata  no  determinista  de esta pregunta emula el resultado final de usar
las tres expresiones regulares, este se encuentra en comment.png

Nuestro automata posee como estados finales q0 y q2 para los comentarios mal 
formados, y los buenos terminan en el estado q1

2 Expresiones write e identificadores
=====================================

E0 es la expresión regular que corresponde a la palabra reservada write.
El token write es reconocido simplemente por la concatenación de los caracteres
lo  representan, así /write/ reconocerá  la expresión y /\Awrite/ lo reconocerá
únicamente al inicio de un string.

E1 es la expresión regular que corresponde a los identificadores de variables
Un identificador es reconocido con la siguiente expresión regular /[a-zA-Z_]\w*/,
igualmente con \A al inicio, solo se reconoce como prefijo.

3 Autómata de 2
===============
El lenguaje L0 denotado por E0 que corresponde a la palabra reservada write se 
encuentra representado por el autómata M0 en el archivo write.png

El lenguaje L1 denotado por E1 que corresponde a los identificadores de 
variables se encuentra representado por el autómata M1 en el archivo 
identifier.png

4 Autómata de la unión de los lenguajes
=======================================
El autómata M2 que reconoce la unión de L(M0) y L(M1) se encuentra en union.png

5 Pertenencia de un token a un lenguaje
=======================================
Según el  autómata M2  en  union.png, el  estado  final  q0  reconoce a los 
identificadores  de variables  del lenguaje y  el estado final  q1 reconoce 
la palabra reservada write.

6 Problemas en la selección de 5
================================

Se generan conflictos,  debido a que un  token  puede  hacer match con 2 estados 
finales. Al llegar al estado final q1, se puede  elegir entre reconocer el token 
en ese punto o continuar hacia el estado final q0.  Esto  puede  generar  que se 
reconozca un token incompleto.


7 Palabras generadoras de fallas y nodos involucrados
===============================================

Dentro  del  lanscii  está  permitido  crear  identificadores  de  variables que 
comiencen con "write", por  ejemplo el identificador "writesomething" es válido. 
Por la  manera  en la que está  planteado  el autómata,  puede  suceder  que  se 
reconozca "write" en el nodo final q1, dejando "something" como un identificador 
a parte. Esto puede ocurrir con cualquier palabra reservada del lenguaje como 
"read", "true", "false".


8 Solución y justificación
==========================

La solución  empleada para el conflicto de  reconocimiento fue cambiar la
expresión regular que reconoce la palabra reservada write. Se agregó "\b" 
al  final, quedando  de  la  siguiente  manera  /write\b/ .  Esto permite 
reconocer  la palabra  reservada  solamente si  es una palabra entera, si 
está seguido de algo, será reconocida como un identificador.
Se utilizó lo mismo para las demás palabras reservadas del sistema.


9 Relación entre implementación y preg 2/8
===========================================

Al  implementar el  analizador lexicográfico de  Lanscii, se logra separar en 
tokens  cada una de las palabras válidas para el lenguaje. Al  hacer esto, se 
genera   implícitamente un  autómata. Lo  que  se puede  relacionar  con  las 
preguntas 2-8 ya  que en  éstas se definió  explícitamente parte del autómata 
que  define  el lenguaje. Al responder  estas preguntas, se  pudo  visualizar
mejor los posibles conflictos de reconocimiento que luego fueron solucionados 
en el lexer creado.
